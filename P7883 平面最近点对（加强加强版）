#include<algorithm>
#include<cstdio>
#include<cstring>
#include<cmath>
#include <iostream>
#include<stack>
#include<cstdlib>
#include<map>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
//总结 本题中心思想  分治
//通过结构体排序可脑补出一个平面
//然后通过分治 分别得到左平面 右平面的最小值 初步得到答案
//但是需要注意的是中间的一些的点没比较
//把中间的那些点暴力求出 即可 然后 就可以得到最小值
struct Node
{
	double x;
	double y;
}p[200005];
int b[200005];
double getS(Node x, Node y)
{
	return sqrt((x.x - y.x) * (x.x - y.x) + (x.y - y.y) * (x.y - y.y));
}
int comp1(Node x, Node y)
{
	if (x.x == y.x)
	{
		return x.y < y.y;
	}
	return x.x < y.x;
}
int comp2(int x, int y)
{
	return p[x].y < p[y].y;
}
double run(int l, int r)
{
	if (l == r)//返回无穷大
	{
		return 1 << 31 - 1;
	}
	if (l + 1 == r)//返回两点距离
	{
		return getS(p[l], p[r]);
	}
	int mid = (l + r) >> 1;
	double d1 = run(l, mid);//左平面
	double d2 = run(mid + 1, r);//右平面
	double ans = min(d1, d2);//初步得到左右平面的最小值
	int i = 0;
	int k = 0;
	int j = 0;
	for (i = l; i <= r; i++)//暴力搜索可能比ans小的点
	{
		if (fabs(p[mid].x - p[i].x) <= ans)
		{
			b[++k] = i;
		}
	}
	sort(b + 1, b + 1 + k, comp2);//按y排序
	for (i = 1; i <= k; i++)
	{
		for (j = i + 1; j <= k && fabs(p[b[i]].y - p[b[j]].y) <= ans; j++)
		{
			
			double sum = getS(p[b[i]], p[b[j]]);
			ans = min(sum, ans);
		}
	}
	return ans;
}
int main()
{
	int n = 0;
	cin >> n;
	int i = 0;
	for (i = 1; i <= n; i++)
	{
		cin >> p[i].x >> p[i].y;
	}
	sort(p + 1, p + 1 + n, comp1);//排序，看成一个平面
	printf("%.4lf", run(1, n));
	return 0;
}
