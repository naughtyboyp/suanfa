7-4 Have Fun with Numbers (20 分)
Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again!

Now you are suppose to check if there are more numbers with this property. That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.

Input Specification:
Each input contains one test case. Each case contains one positive integer with no more than 20 digits.

Output Specification:
For each test case, first print in a line "Yes" if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or "No" if not. Then in the next line, print the doubled number.

Sample Input:
1234567899
结尾无空行
Sample Output:
Yes
2469135798


#include<stdio.h>
#include<string.h>
int main()
{
    char a[30] = {0};
    int vis1[15] = {0};
    int vis2[15] = {0};
    int c[30] = {0};
    scanf("%s", a);
    int len = strlen(a);
    int i = 0;
    int k = 0;
    for(i = len-1, k = 0; i>=0; i--)
    {
        c[k] = a[i] - '0';
        vis1[c[k]]++;
        k++;
    }
    int j = 0;
    int z[30] = {0};
    int q = 0;
    for(i = 0; i<len; i++)
    {
        z[i] = c[i]*2 + q;
        q = z[i]/10;
        z[i]%=10;
        z[len] = q;
    }
    for(i = 0; i<len; i++)
    {
        vis2[z[i]]++;
    }
    if(z[i])
    {
        vis2[z[i]]++;
    }
    for(i = 0; i<10; i++)
    {
        if(vis1[i] != vis2[i])
        {
            break;
        }
    }
    if(i == 10)
    {
        printf("Yes\n");
        if(z[len])
        {
            printf("%d", z[len]);
        }
        for(j = len-1; j>=0; j--)
        {
            printf("%d", z[j]);
        }
    }
    else
    {
        printf("No\n");
        if(z[len])
        {
            printf("%d", z[len]);
        }
        for(j = len-1; j>=0; j--)
        {
            printf("%d", z[j]);
        }

    }
    return 0;
}
