题目描述
有一个仅由数字00与11组成的n \times nn×n格迷宫。若你位于一格00上，那么你可以移动到相邻44格中的某一格11上，同样若你位于一格11上，那么你可以移动到相邻44格中的某一格00上。

你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。

输入格式
第11行为两个正整数n,mn,m。

下面nn行，每行nn个字符，字符只可能是00或者11，字符之间没有空格。

接下来mm行，每行22个用空格分隔的正整数i,ji,j，对应了迷宫中第ii行第jj列的一个格子，询问从这一格开始能移动到多少格。

输出格式
mm行，对于每个询问输出相应答案。

输入输出样例
输入 #1复制
2 2
01
10
1 1
2 2
输出 #1复制
4
4
说明/提示
所有格子互相可达。

对于20\%20%的数据，n≤10n≤10；

对于40\%40%的数据，n≤50n≤50；

对于50\%50%的数据，m≤5m≤5；

对于60\%60%的数据，n≤100,m≤100n≤100,m≤100；

对于100\%100%的数据，n≤1000,m≤100000n≤1000,m≤100000。


#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cmath>
#include<queue>
#include<map>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
// 迷宫  预处理   bfs   用vis切割连通图    先遍历maze每个坐标  把迷宫中的所有连通图用vis计数标记达成切割
//然后用temp数组来存储第d张连通图的ans   注意当地图全是0或者1时 连通图的数量会很大，所以 temp数组要开大一点
//最后用直接查找 x, y属于第几张连通图 然后输出即可
int maze[1005][1005];//地图
int temp[1000005];//存储连通图答案
int vis[1005][1005];//切割连通图
int d = 0;//连通图计数器
int n = 0;
int m = 0;
int ans = 0;
int dx[] = { 0,1,0,-1 };
int dy[] = { 1,0,-1,0 };
void bfs(int sx, int sy)
{
	queue<pair<int, int>> q;
	q.push(make_pair(sx, sy));
	++d;//连通图计数器
	vis[sx][sy] = d;//一定记得起始点的标记
	ans = 1;//一定记得ans的初始化
	while (q.size())
	{
		int x = q.front().first;
		int y = q.front().second;
		int val = maze[x][y];
		q.pop();
		int i = 0;
		for (i = 0; i < 4; i++)
		{
			int tx = x + dx[i];
			int ty = y + dy[i];
			int num = maze[tx][ty];
			if (tx < 1 || tx > n || ty <1 || ty > n || num == val || vis[tx][ty] != 0)
			{
				continue;
			}
			ans++;
			vis[tx][ty] = d;//最重要的一步，切割连通图
			q.push(make_pair(tx, ty));
		}
	}
	temp[d] = ans;//存放每一张连通图的ans
}
int main()
{
	
	cin >> n >> m;
	int i = 0;
	int j = 0;
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n; j++)
		{
			scanf("%1d", &maze[i][j]);
		}
	}
	for (i = 1; i <= n; i++)//标记出每个坐标的所在连通图
	{
		for (j = 1; j <= n; j++)
		{
			if (vis[i][j] == 0)
			{
				bfs(i, j);
			}
		}
	}
	while (m--)
	{
		int x = 0;
		int y = 0;
		scanf("%d%d", &x, &y);//查询
		printf("%d\n", temp[vis[x][y]]);
	}
	
}
