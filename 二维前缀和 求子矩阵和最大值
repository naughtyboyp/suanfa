To The Max
TimeLimit: 2000/1000 MS (Java/Others)  MemoryLimit: 65536/32768 K (Java/Others)
64-bit integer IO format:%I64d
已解决 | 点击收藏
Problem Description
Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1 x 1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle.

As an example, the maximal sub-rectangle of the array:

0 -2 -7 0
9 2 -6 2
-4 1 -4 1
-1 8 0 -2

is in the lower left corner:

9 2
-4 1
-1 8

and has a sum of 15.
Input
多组数据

The input consists of an N x N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N 2 integers separated by whitespace (spaces and newlines). These are the N 2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127].

Output
Output the sum of the maximal sub-rectangle.
SampleInput
4
0 -2 -7 0
9 2 -6 2
-4 1 -4 1
-1 8 0 -2
SampleOutput
15

//二维前缀和预处理
//暴力出所有矩阵大小
//然后暴力查找所有子矩阵
#include <stdio.h>
#include <stdlib.h>
int a[105][105];
int main()
{
    int n = 0;
    while(~scanf("%d", &n))
    {
        int i = 0;
        int j = 0;
        for(i = 1; i<=n; i++)
        {
            for(j = 1; j<=n; j++)
            {
                scanf("%d", &a[i][j]);
                a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1] + a[i][j];
            }
        }
        int sum = 0;
        int max = 0;
        int x = 0;
        int y = 0;
        for(x = 1; x <=n; x++)
        {
            for(y = 1; y<= n; y++)
            {
                for(i = 1; i+x-1<=n; i++)
                {
                    for(j = 1; j+y-1<=n; j++)
                    {
                        sum = a[i+x-1][j+y-1] - a[i+x-1][j-1] - a[i-1][j+y-1] + a[i-1][j-1];
                        if(max < sum)
                        {
                            max = sum;
                        }
                    }
                }
            }
        }
        printf("%d\n", max);
    }

    return 0;
}
