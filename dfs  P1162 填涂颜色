题目描述
由数字00组成的方阵中，有一任意形状闭合圈，闭合圈由数字11构成，围圈时只走上下左右44个方向。现要求把闭合圈内的所有空间都填写成22.例如：6 \times 66×6的方阵（n=6n=6），涂色前和涂色后的方阵如下：

0 0 0 0 0 0
0 0 1 1 1 1
0 1 1 0 0 1
1 1 0 0 0 1
1 0 0 0 0 1
1 1 1 1 1 1
0 0 0 0 0 0
0 0 1 1 1 1
0 1 1 2 2 1
1 1 2 2 2 1
1 2 2 2 2 1
1 1 1 1 1 1
输入格式
每组测试数据第一行一个整数n(1 \le n \le 30)n(1≤n≤30)

接下来nn行，由00和11组成的n \times nn×n的方阵。

方阵内只有一个闭合圈，圈内至少有一个00。

//感谢黄小U饮品指出本题数据和数据格式不一样. 已修改(输入格式)

输出格式
已经填好数字22的完整方阵。

输入输出样例
输入 #1复制
6
0 0 0 0 0 0
0 0 1 1 1 1
0 1 1 0 0 1
1 1 0 0 0 1
1 0 0 0 0 1
1 1 1 1 1 1
输出 #1复制
0 0 0 0 0 0
0 0 1 1 1 1
0 1 1 2 2 1
1 1 2 2 2 1
1 2 2 2 2 1
1 1 1 1 1 1
说明/提示
1 \le n \le 301≤n≤30


#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cmath>
#include<queue>
#pragma warning(disable:4996)
//本题思路
//找到只要找到一个圈内的0，然后dfs涂色即可
//我们发现圈内的0四个方向都有1  那么我们通过check 1的个数即可判定0是否在圈内
//
using namespace std;
typedef long long ll;
const int N = 50;
int maze[N][N];
int dx[] = { 0,1,0,-1 };
int dy[] = { 1,0,-1,0 };
int n = 0;
int check(int x, int y)
{
    int num = 0;
    int i = 0;
    for (i = x; i <= n; i++)
    {
        if (maze[i][y] == 1)
        {
            num++;
            break;
        }
    }
    for (i = x; i >= 1; i--)
    {
        if (maze[i][y] == 1)
        {
            num++;
            break;
        }
    }
    for (i = y; i >= 1; i--)
    {
        if (maze[x][i] == 1)
        {
            num++;
            break;
        }
    }
    for (i = y; i <= n; i++)
    {
        if (maze[x][i] == 1)
        {
            num++;
            break;
        }
    }
    if (num == 4)
    {
        return 1;
    }
    return 0;
}
void dfs(int x, int y)
{
    int i = 0;
    int j = 0;
    maze[x][y] = 2;
    for (i = 0; i < 4; i++)
    {
        int tx = x + dx[i];
        int ty = y + dy[i];
        if (maze[tx][ty] == 0)
        {
            dfs(tx, ty);
        }
    }
}
void Print()
{
    int i = 0;
    int j = 0;
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            cout << maze[i][j] << " ";
        }
        cout << endl;
    }
}
int main()
{
    cin >> n;
    int i = 0;
    int j = 0;
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            cin >> maze[i][j];
        }
    }
    int f = 0;
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            if (maze[i][j] == 0 && check(i, j) )
            {
                dfs(i, j);
                f = 1;
                break;
            }

        }
        if (f)
        {
            break;
        }
    }
    Print();
    
}
