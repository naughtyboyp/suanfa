P1902 刺杀大使
提交
10.01k
通过
3.39k
时间限制
1.00s
内存限制
125.00MB
提交答案
加入题单
题目提供者
洛谷
难度
普及+/提高
历史分数
100
 提交记录  查看题解
标签
NOI 导刊
进入讨论版
相关讨论
推荐题目
 展开
题目描述
某组织正在策划一起对某大使的刺杀行动。他们来到了使馆，准备完成此次刺杀，要进入使馆首先必须通过使馆前的防御迷阵。

迷阵由 n\times mn×m 个相同的小房间组成，每个房间与相邻四个房间之间有门可通行。在第 nn 行的 mm 个房间里有 mm 个机关，这些机关必须全部打开才可以进入大使馆。而第 11 行的 mm 个房间有 mm 扇向外打开的门，是迷阵的入口。除了第 11 行和第 nn 行的房间外，每个房间都被使馆的安保人员安装了激光杀伤装置，将会对进入房间的人造成一定的伤害。第 ii 行第 jj 列 造成的伤害值为 p_{i,j}p 
i,j
​
 （第 11 行和第 nn 行的 pp 值全部为 00）。

现在某组织打算以最小伤害代价进入迷阵，打开全部机关，显然，他们可以选 择任意多的人从任意的门进入，但必须到达第 nn 行的每个房间。一个士兵受到的伤害值为他到达某个机关的路径上所有房间的伤害值中的最大值，整个部队受到的伤害值为所有士兵的伤害值中的最大值。现在，这个恐怖组织掌握了迷阵的情况，他们需要提前知道怎么安排士兵的行进路线可以使得整个部队的伤害值最小。

输入格式
第一行有两个整数 n,mn,m，表示迷阵的大小。

接下来 nn 行，每行 mm 个数，第 ii 行第 jj 列的数表示 p_{i,j}p 
i,j
​
 。

输出格式
输出一个数，表示最小伤害代价。

输入输出样例
输入 #1复制
4 2
0 0 
3 5 
2 4 
0 0 
输出 #1复制
3
说明/提示
50\%50% 的数据，n,m \leq 100n,m≤100；
100\%100% 的数据，n,m \leq 1000n,m≤1000，p_{i,j} \leq 1000p 
i,j
​
 ≤1000。
 
 
 #include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cmath>
#include<queue>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
const int inf = 0x3f3f3f3f;
const int N = 1005;
int n = 0;
int m = 0;
int maze[N][N];
int vis[N][N];
const int dx[] = {0, 1,0,-1,0 };
const int dy[] = {0, 0,1,0,-1 };
int check(int x,int y,int mid)
{
    
    queue<pair<int,int>> q;
    q.push(make_pair(x,y));
    vis[x][y] = 1;
    while (!q.empty())
    {
        int i = 0;
        int xx = q.front().first;
        int yy = q.front().second;
        q.pop();
        for (i = 1; i <= 4; i++)
        {
            int tx = xx+dx[i];
            int ty = yy+dy[i];
            //此处的判断很重要
            // 难点意识到 mid意味着
            //只要能找到一条路线，路线中的值都小于等于mid
            //那么mid的值就是可以的

            //过滤掉不满足条件的点
            if (tx <1 || tx>n || ty <1 || ty>m || vis[tx][ty] || maze[tx][ty] > mid)
            
            {
                continue;
            }
            vis[tx][ty] = 1;
            if (tx == n)
            {
                return 1;
            }
            else
            {
                q.push(make_pair(tx, ty));
            }
        }
    }
    return 0;
}
int main()
{
    
    cin >> n >> m;
    int i = 0;
    int j = 0;
    int l = inf;//初始化
    int r = -inf;
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= m; j++)
        {
            cin >> maze[i][j];
            l = min(l, maze[i][j]);
            r = max(r, maze[i][j]);
        }
    }
    while (l + 1 < r)
    {
        memset(vis, 0, sizeof(vis));//初始化
        int mid = (l + r) >> 1;
        if (check(1,1,mid))
        {
            r = mid;
        }
        else
        {
            l = mid;
        }
    }
    cout << r;
    return 0;
}
