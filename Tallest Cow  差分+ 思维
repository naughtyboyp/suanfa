Tallest Cow
TimeLimit:2000MS  MemoryLimit:65536K
64-bit integer IO format:%lld
已解决 | 点击收藏
Problem Description
FJ's N (1 ≤ N ≤ 10,000) cows conveniently indexed 1..N are standing in a line. Each cow has a positive integer height (which is a bit of secret). You are told only the height H (1 ≤ H ≤ 1,000,000) of the tallest cow along with the index I of that cow.

FJ has made a list of R (0 ≤ R ≤ 10,000) lines of the form "cow 17 sees cow 34". This means that cow 34 is at least as tall as cow 17, and that every cow between 17 and 34 has a height that is strictly smaller than that of cow 17.

For each cow from 1..N, determine its maximum possible height, such that all of the information given is still correct. It is guaranteed that it is possible to satisfy all the constraints.

Input
Line 1: Four space-separated integers: N, I, H and R
Lines 2.. R+1: Two distinct space-separated integers A and B (1 ≤ A, B ≤ N), indicating that cow A can see cow B.
Output
Lines 1.. N: Line i contains the maximum possible height of cow i.
SampleInput
9 3 5 5
1 3
5 3
4 3
3 7
9 8
SampleOutput
5
4
5
3
4
4
5
5
5


总结，这种题目 一定要注意特判点  就是下面的那一个
当你卡住的时候就要想到特判
#include <iostream>
#include<stdio.h>
#include<string.h>
using namespace std;
int a[6666];//原数组
int b[6666];//差分数组
int flag[6666][6666];//标记是否出现相同的两头牛牛
int main()
{
    int n = 0;
    int i = 0;
    int h = 0;
    int r = 0;
    scanf("%d%d%d%d", &n, &i, &h, &r);
    for(i = 1; i<=n; i++)
    {
        a[i] = h;
    }
    while(r--)
    {
        int x = 0;
        int y = 0;
        scanf("%d%d", &x, &y);
        if(x > y)//交换位置，方便操作
        {
            int temp = x;
            x = y;
            y = temp;
        }
        if(flag[x][y] == 0)//排除掉出现过的两头牛牛  一定要注意特判！！！！
        {
            flag[x][y] = 1;
            b[x+1]-=1;
            b[y]+=1;
        }
    }
    //b[1] = h;//这种写法是一步到位的
    for(i = 1; i<=n; i++)//开始计算前缀和了
    {
        b[i] += b[i-1];//差分的前缀和  刚开始用这种慢一点的 
        a[i] += b[i];//原数组加上去
        //b[i] += b[i-1];
    }
    for(i = 1; i<=n; i++)
    {
        printf("%d\n", b[i]);
    }
    return 0;
}


