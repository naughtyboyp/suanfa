#include<algorithm>
#include<cstdio>
#include<cstring>
#include<cmath>
#include <iostream>
#include<stack>
#include<cstdlib>
#include<map>
#include<vector>
#include<string>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
const int MAX = 1 << 31 - 1;
int graph[100][100];
int prim(int graph[][100], int n)
{
	int i = 0;
	int j = 0;
	int lowcost[100];
	int mst[100];
	lowcost[1] = 0;
	mst[1] = 0;
	for (i = 2; i <= n; i++)//初始化lowcost数组
	{
		lowcost[i] = graph[1][i];
		mst[i] = 1;
	}
	int sum = 0;
	for (i = 2; i <= n; i++)
	{
		int min1 = MAX;
		int minid = 0;
		for (j = 2; j <= n; j++)//找到最小边
		{
			if (lowcost[j] != 0 && lowcost[j] < min1)
			{
				min1 = lowcost[j];
				minid = j;
			}
		}
		printf("V%d-V%d=%d\n", mst[minid], minid, min1);
		sum += min1;
		lowcost[minid] = 0;//把找到的最小边加入集合
		mst[minid] = 0;
		for (j = 2; j <= n; j++)//更新lowcost数组
		{
			if (lowcost[j] != 0 && graph[minid][j] < lowcost[j])
			{
				lowcost[j] = graph[minid][j];
				mst[j] = minid;
			}
		}
		
	}
	return sum;
}
int main()
{
	int m = 0;
	int n = 0;
	cin >> m >> n;
	int i = 0;
	int j = 0;
	for (i = 1; i <= m; i++)//初始化图
	{
		for (j = 1; j <= m; j++)
		{
			graph[i][j] = MAX;
		}
	}
	for (i = 1; i <= n; i++)//构建图
	{
		int x = 0;
		int y = 0;
		int cost = 0;
		cin >> x >> y >> cost;
		graph[x][y] = cost;
		graph[y][x] = cost;
	}
	int cost = prim(graph, m);
	cout << "最小生成树权值和=" << cost;
}
