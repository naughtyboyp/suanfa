题目描述
恰逢 HH国国庆，国王邀请nn 位大臣来玩一个有奖游戏。首先，他让每个大臣在左、右手上面分别写下一个整数，国王自己也在左、右手上各写一个整数。然后，让这 nn 位大臣排成一排，国王站在队伍的最前面。排好队后，所有的大臣都会获得国王奖赏的若干金币，每位大臣获得的金币数分别是：排在该大臣前面的所有人的左手上的数的乘积除以他自己右手上的数，然后向下取整得到的结果。

国王不希望某一个大臣获得特别多的奖赏，所以他想请你帮他重新安排一下队伍的顺序，使得获得奖赏最多的大臣，所获奖赏尽可能的少。注意，国王的位置始终在队伍的最前面。

输入格式
第一行包含一个整数nn，表示大臣的人数。

第二行包含两个整数 aa和 bb，之间用一个空格隔开，分别表示国王左手和右手上的整数。

接下来 nn行，每行包含两个整数aa 和 bb，之间用一个空格隔开，分别表示每个大臣左手和右手上的整数。

输出格式
一个整数，表示重新排列后的队伍中获奖赏最多的大臣所获得的金币数。

输入输出样例
输入 #1复制
3 
1 1 
2 3 
7 4 
4 6 
输出 #1复制
2
说明/提示
【输入输出样例说明】

按11、22、33 这样排列队伍，获得奖赏最多的大臣所获得金币数为 22；

按 11、33、22 这样排列队伍，获得奖赏最多的大臣所获得金币数为22；

按 22、11、33 这样排列队伍，获得奖赏最多的大臣所获得金币数为 22；

按22、33、11这样排列队伍，获得奖赏最多的大臣所获得金币数为99；

按 33、11、22这样排列队伍，获得奖赏最多的大臣所获得金币数为 22；

按33、22、11 这样排列队伍，获得奖赏最多的大臣所获得金币数为 99。

因此，奖赏最多的大臣最少获得 22个金币，答案输出 22。

【数据范围】

对于 20%的数据，有 1≤ n≤ 10,0 < a,b < 81≤n≤10,0<a,b<8；

对于 40%的数据，有1≤ n≤20,0 < a,b < 81≤n≤20,0<a,b<8；

对于 60%的数据，有 1≤ n≤1001≤n≤100；

对于 60%的数据，保证答案不超过 10^910 
9
 ；

对于 100%的数据，有 1 ≤ n ≤1,000,0 < a,b < 100001≤n≤1,000,0<a,b<10000。

NOIP 2012 提高组 第一天 第二题


#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cmath>
#include<queue>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
const int inf = 0x3f3f3f3f;
/*难点在于  贪心排序   题目要求的队伍 通过贪心可知   队伍前后成员A1, A2满足a1* b1 < b2* b2的关系
    高精度乘num  细节就是 位数可以直接拉到最大值  后面删除前缀0即可
    运用两次循环   一次直接乘num  再一次用来进位
    高精度除num  位数拉满   模拟运算除法
    本题思路
    贪心结构体排序
    用mul[] 来记录前面所有人的乘积S
    用temp[] 来存放  S除以num的结果
    用ans[] 来记录最大值*/
const int N = 10010;
int mul[N];//存放前面所有人的乘积S
int ans[N];//记录最大值
int temp[N];//记录每个人的金币
struct node
{
    int l;
    int r;
}a[N];
void cheng(int num)
{
    int i = 0;
    for (i = N; i >= 1; i--)
    {
        mul[i] *= num;
    }
    for (i = 1; i <= N; i++)
    {
        mul[i + 1] += mul[i] / 10;
        mul[i] %= 10;
    }
}
void chu(int num)
{
    int i = 0;
    int x = 0;
    for (i = N; i >= 1; i--)
    {
        x = x * 10 + mul[i];
        temp[i] = x / num;
        x %= num;
    }
}
int more()
{
    int i = 0;
    for (i = N; i >= 1; i--)
    {
        if (ans[i] < temp[i])
        {
            return 1;
        }
    }
    return 0;
}
void copy()
{
    int i = 0;
    for (i = N; i >= 1; i--)
    {
        ans[i] = temp[i];
    }
}
int comp(node x, node y)
{
    return x.l * x.r < y.l* y.r;
}
int main()
{
    int n = 0;
    cin >> n;
    int i = 0;
    for (i = 0; i <= n; i++)
    {
        cin >> a[i].l >> a[i].r;
    }
    sort(a+1,a+1+n,comp);
    mul[1] = 1;
    for (i = 0; i <= n; i++)
    {
        chu(a[i].r);
        if (more())
        {
            copy();
        }
        cheng(a[i].l);
    }
    int len = 0;
    for (i = N; i >= 1; i--)
    {
        if (ans[i] != 0)
        {
            len = i;
            break;
        }
    }
    for (i = len; i >= 1; i--)
    {
        cout << ans[i];
    }
   
}
