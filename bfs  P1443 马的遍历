 展开
题目描述
有一个 n \times mn×m 的棋盘，在某个点 (x, y)(x,y) 上有一个马，要求你计算出马到达棋盘上任意一个点最少要走几步。

输入格式
输入只有一行四个整数，分别为 n, m, x, yn,m,x,y。

输出格式
一个 n \times mn×m 的矩阵，代表马到达某个点最少要走几步（左对齐，宽 55 格，不能到达则输出 -1−1）。

输入输出样例
输入 #1复制
3 3 1 1
输出 #1复制
0    3    2    
3    -1   1    
2    1    4    
说明/提示
数据规模与约定
对于全部的测试点，保证 1 \leq x \leq n \leq 4001≤x≤n≤400，1 \leq y \leq m \leq 4001≤y≤m≤400。

#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cmath>
#include<queue>
#include<map>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
//总结  bfs  方向数组改一下就好
//注意题目要求的是左对齐！！！！！  第一次提交的时候 输出错误了
//左输出是  %-5d  ！！！
struct node
{
	int x;
	int y;
	int step;
	node(int x, int y, int step)
	{
		this->x = x;
		this->y = y;
		this->step = step;
	}
};
int n = 0;
int m = 0;
int sx = 0;
int sy = 0;
int vis[500][500];
int dx[] = { 1,2,1,2,-1,-2,-1,-2 };
int dy[] = { 2,1,-2,-1,-2,-1,2,1 };
void bfs()
{
	memset(vis, -1, sizeof(vis));
	queue<node> q;
	q.push(node(sx,sy,0));
	vis[sx][sy] = 0;
	while (q.size())
	{
		int x = q.front().x;
		int y = q.front().y;
		int step = q.front().step;
		int i = 0;
		q.pop();
		for (i = 0; i < 8; i++)
		{
			int tx = x + dx[i];
			int ty = y + dy[i];
			int tstep = step + 1;
			if (tx < 1 || tx > n || ty < 1 || ty > m || vis[tx][ty] != -1)
			{
				continue;
			}
			vis[tx][ty] = tstep;
			q.push(node(tx, ty, tstep));
		}
	}
	int i = 0;
	int j = 0;
	for (i = 1; i <= n; i++)
	{
		
		for (j = 1; j <= m; j++)
		{
			
				printf("%-5d", vis[i][j]);
			
			
		}
		cout << endl;
	}
}
int main()
{
	cin >> n >> m >> sx >> sy;
	bfs();
}
