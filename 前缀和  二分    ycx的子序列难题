ycx的子序列难题
TimeLimit:1000MS  MemoryLimit:128MB
64-bit integer IO format:%lld
Problem Description
现有一个仅由 y,c,x 三个字母构成的字符串 S 。
ycx 认为一个字符串是好的当且仅当这个字符串的前n位字符全是 y ，第 n+1 位到第 2∗n 位全是 c ，第 2∗n+1 到第 3∗n 位全是 x 。
请找出给定的字符串 S 中满足 ycx 要求的子序列的 n 的最大值。


注意：子序列中的字符都是字符串的子集，但是一定是顺序上是单调的：例如"abcdefg" 则"bcd" 为其子序列同时“aeg”也是其子序列，但“gea”不是其子序列。

Input
第一行给出一个正整数 t(1<=t<=100)

之后的t行，每行给出一个字符串 S(1<= S.length <=104)

Output
对每一组输入，在一行中输出最大满足要求的n。

SampleInput
3
ycx
yyc
cxyyccxx
SampleOutput
1
0
2


#include <iostream>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<cmath>
#pragma warning(disable:4996) 
//对于子串，子序列，可以考虑双指针
//其次有最大值就可以考虑二分，写好check即可
//计算区间个数，前缀和是个好东西，预处理，然后静态访问


//本题前缀和预处理三个字母出现次数的前缀和，便于得出区间和
//然后二分n的值即可
//check函数  通过双指针，区间和，当三个条件都满足时，说明此时的mid成立  然后就试试更大值


using namespace std;
const int N = 100005;
int len = 0;
char a[N];
int ansy[N];//前缀和
int ansc[N];
int ansx[N];

int check(int n)
{
    int l = 1;//左边指针
    int r = 1;//右指针
    while (ansy[r] - ansy[l - 1] < n && r <= len)//当r指向的区间和大于等于n时停止
    {
        r++;
    }
    if (r == len + 1)//说明y不够n个
    {
        return 0;
    }
    l = r;
    while (ansc[r] - ansc[l - 1] < n && r <= len)
    {
        r++;
    }
    if (r == len + 1)//说明c不够n个
    {
        return 0;
    }
    l = r;
    while (ansx[r] - ansx[l - 1] < n && r <= len)
    {
        r++;
    }
    if (r == len + 1)//说明x不够n个
    {
        return 0;
    }
    return 1;
}
int main()
{
    int t = 0;
    cin >> t;
    while (t--)
    {
        scanf("%s", a + 1);
        len = strlen(a + 1);
        int i = 0;
        for (i = 1; i <= len; i++)
        {
            ansy[i] = ansy[i - 1] + (a[i] == 'y');//子序列可以这样用 用句式返回值来进行前缀和 然后静态区间访问 区间和是多少
            ansc[i] = ansc[i - 1] + (a[i] == 'c');
            ansx[i] = ansx[i - 1] + (a[i] == 'x');
        }
        int l = -1;
        int r = 1e5+5;
        while (l+1 < r)
        {
            int mid = (l + r) / 2;
            if (check(mid))//二分找答案
            {
                l = mid;
            }
            else
            {
                r = mid;
            }
        }
        cout << l << endl;
    }
    return 0;
}
