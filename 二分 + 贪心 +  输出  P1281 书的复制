题目背景
大多数人的错误原因：尽可能让前面的人少抄写，如果前几个人可以不写则不写，对应的人输出 0 0 。

不过，已经修改数据，保证每个人都有活可干。

题目描述
现在要把 mm 本有顺序的书分给 kk 个人复制（抄写），每一个人的抄写速度都一样，一本书不允许给两个（或以上）的人抄写，分给每一个人的书，必须是连续的，比如不能把第一、第三、第四本书给同一个人抄写。

现在请你设计一种方案，使得复制时间最短。复制时间为抄写页数最多的人用去的时间。

输入格式
第一行两个整数 m,km,k。

第二行 mm 个整数，第 ii 个整数表示第 ii 本书的页数。

输出格式
共 kk 行，每行两个整数，第 ii 行表示第 ii 个人抄写的书的起始编号和终止编号。 kk 行的起始编号应该从小到大排列，如果有多解，则尽可能让前面的人少抄写。

输入输出样例
输入 #1复制
9 3
1 2 3 4 5 6 7 8 9
输出 #1复制
1 5
6 7
8 9
说明/提示
1\le k \le m \le 5001≤k≤m≤500。

#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cmath>
#include<queue>
#include<map>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
const int N = 505;
const int inf = 0x3f3f3f3f;
int n = 0;
int m = 0;
int a[N];
int ans[N][N];
int check(int mid)
{
	int i = 0;
	int num = 1;
	int sum = 0;
	for (i = n; i >= 1; i--)
	{
		if (a[i] > mid)
		{
			return 0;
		}
		if (sum + a[i] <= mid)
		{
			sum += a[i];
		}
		else
		{
			sum = a[i];
			num++;
		}
	}
	if (num <= m)
	{
		return 1;
	}
	return 0;
}
int main()
{
	cin >> n >> m;
	int i = 0;
	int l = 0;
	int r = 0;
	for (i = 1; i <= n; i++)
	{
		cin >> a[i];
		r += a[i];
	}
	r++;
	while (l + 1 < r)
	{
		int mid = (l + r) >> 1;
		if (check(mid))
		{
			r = mid;
		}
		else
		{
			l = mid;
		}
	}
	int sum = 0;
	int k = m;
	int end = n;
	for (i = n; i >= 1; i--)
	{
		if (sum + a[i] <= r)
		{
			sum += a[i];
		}
		else
		{
			sum = a[i];
			ans[k][0] = i + 1;
			ans[k][1] = end;
			end = i;
			k--;
		}
	}
	ans[1][0] = 1;
	ans[1][1] = end;
	for (i = 1; i <= m; i++)
	{
		cout << ans[i][0] << " " << ans[i][1] << endl;
	}
}
