题目描述
一个点每过一个单位时间就会向四个方向扩散一个距离，如图。



两个点a、b连通，记作e(a,b),当且仅当a、b的扩散区域有公共部分。连通块的定义是块内的任意两个点u、v都必定存在路径e(u,a0),e(a0,a1),…,e(ak,v)。给定平面上的n给点，问最早什么时刻它们形成一个连通块。

输入格式
第一行一个数n，以下n行，每行一个点坐标。

【数据规模】

对于20%的数据，满足1≤N≤5; 1≤X[i],Y[i]≤50;

对于100%的数据，满足1≤N≤50; 1≤X[i],Y[i]≤10^9。

输出格式
一个数，表示最早的时刻所有点形成连通块。

输入输出样例
输入 #1复制
2
0 0
5 5
输出 #1复制
5

#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cmath>
#include<queue>
#include<map>
#pragma warning(disable:4996)
using namespace std;
typedef long long ll;
const int inf = 0x3f3f3f3f;
//首先将n个点连通的连通图
//然后求出这个连通图中的最长边
//最后要求该连通图中的最长边最小
//该连通图即为最小生成树
// 其次就是存图，点跟点之间的边
//本题就是求 最小生成树中的最长边
/*那么拓展到多个节点，
我们都希望
每两个点都是被离它最近的点扩散到的，
这样可以保证时间尽量的少。*/
//即最小连通图

struct node
{
	int x;
	int y;
}a[60];
int n = 0;
int graph[60][60];
int ans = -inf;
void prime()
{
	int i = 0;
	int j = 0;
	int lowcost[60];
	int mst[100];
	lowcost[1] = 0;//将起点加入集合
	mst[1] = 0;
	for (i = 2; i <= n; i++)
	{
		lowcost[i] = graph[1][i];//初始化
		mst[i] = 1;
	}
	for (i = 2; i <= n; i++)//一共要找到n-1条边
	{
		int min1 = inf;
		int minid = 0;
		for (j = 2; j <= n; j++)//找到最短边
		{
			if (lowcost[j] != 0 && lowcost[j] < min1)
			{
				min1 = lowcost[j];
				minid = j;
			}
		}
		ans = max(ans, min1);//最小生成树中最长的一条边
		mst[minid] = 0;//加入集合
		lowcost[minid] = 0;
		for (j = 2; j <= n; j++)//更新集合到各点的距离
		{
			if (lowcost[j] != 0 && graph[minid][j] < lowcost[j])
			{
				lowcost[j] = graph[minid][j];
				mst[j] = minid;
			}
		}
	}
}
int main()
{
	cin >> n;
	int i = 0;
	for (i = 1; i <= n; i++)//
	{
		cin >> a[i].x >> a[i].y;
	}
	int j = 0;
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n; j++)//初始化
		{
			graph[i][j] = inf;
		}
	}
	for (i = 1; i <= n; i++)//存图
	{
		for (j = i; j <= n; j++)
		{
			graph[i][j] = graph[j][i] = (1+abs(a[i].x - a[j].x) + abs(a[i].y - a[j].y))>>1;//连通两点的时间
		}
	}
	prime();
	cout << ans;
}
